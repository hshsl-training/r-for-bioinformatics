[
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "R for Bioinformatics",
    "section": "Acknowledgements",
    "text": "Acknowledgements"
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "R for Bioinformatics",
    "section": "License",
    "text": "License\nThis work is licensed under a Creative Commons Attribution 4.0 International License (CC BY)"
  },
  {
    "objectID": "02-rentrez.html",
    "href": "02-rentrez.html",
    "title": "Accessing NCBI data with rentrez",
    "section": "",
    "text": "Practice putting together a bioinformatics workflow\nUnderstand how to programmatically access NCBI databases"
  },
  {
    "objectID": "02-rentrez.html#learning-objectives",
    "href": "02-rentrez.html#learning-objectives",
    "title": "Accessing NCBI data with rentrez",
    "section": "",
    "text": "Practice putting together a bioinformatics workflow\nUnderstand how to programmatically access NCBI databases"
  },
  {
    "objectID": "02-rentrez.html#ncbi-data-and-the-rentrez-package",
    "href": "02-rentrez.html#ncbi-data-and-the-rentrez-package",
    "title": "Accessing NCBI data with rentrez",
    "section": "NCBI data and the rentrez package",
    "text": "NCBI data and the rentrez package\nThe National Center for Biotechnology Information (NCBI), a division of the National Library of Medicine, maintains several databases that provide access to a wide range of biological data and tools, including databases for DNA and protein sequences (GenBank, RefSeq), scientific literature (PubMed, PMC), and resources for analyzing genetic and genomic information (BLAST, Gene, SRA toolkit). It serves as a central hub for researchers around the world to find, share, and analyze biological data. NCBI is a major partner in the International Nucleotide Sequence Database Collaboration (INSDC) along with EMBL-EBI in Europe and DDBJ in Japan.\nEntrez is the name of the integrated search system across all NCBI databases. Programmatic access to the Entrez system is provided by the Entrez Programming Utilities (E-utilities). The E-utilities can be used on the command line, but in this class, we will be using the rentrez package, an R interface to the program.\nFirst, let’s see what databases we can access with rentrez\n\nentrez_dbs()\n\n [1] \"pubmed\"          \"protein\"         \"nuccore\"         \"ipg\"            \n [5] \"nucleotide\"      \"structure\"       \"genome\"          \"annotinfo\"      \n [9] \"assembly\"        \"bioproject\"      \"biosample\"       \"blastdbinfo\"    \n[13] \"books\"           \"cdd\"             \"clinvar\"         \"gap\"            \n[17] \"gapplus\"         \"grasp\"           \"dbvar\"           \"gene\"           \n[21] \"gds\"             \"geoprofiles\"     \"medgen\"          \"mesh\"           \n[25] \"nlmcatalog\"      \"omim\"            \"orgtrack\"        \"pmc\"            \n[29] \"proteinclusters\" \"pcassay\"         \"protfam\"         \"pccompound\"     \n[33] \"pcsubstance\"     \"seqannot\"        \"snp\"             \"sra\"            \n[37] \"taxonomy\"        \"biocollections\"  \"gtr\"            \n\n\nWe can also see what fields are available to search in a database\n\nentrez_db_searchable(db=\"gene\")\n\nSearchable fields for database 'gene'\n  ALL    All terms from all searchable fields \n  UID    Unique number assigned to a gene record \n  FILT   Limits the records \n  TITL   gene or protein name \n  WORD   Free text associated with record \n  ORGN   scientific and common names of organism \n  MDAT   The last date on which the record was updated \n  CHR    Chromosome number or numbers; also 'mitochondrial', 'unknown' properties \n  MV     Chromosomal map location as displayed in MapViewer \n  GENE   Symbol or symbols of the gene \n  ECNO   EC number for enzyme or CAS registry number \n  MIM    MIM number from OMIM \n  DIS    Name(s) of diseases associated with this gene. When available, OMIM name will be used \n  ACCN   Nucleotide or protein accession(s) associated with this gene \n  UGEN   UniGene cluster number for this gene \n  PROP   Properties of Gene record \n  CDAT   The date on which this record first appeared \n  NCAC   nucleotide accessions of sequences \n  NUID   nucleotide uids of sequences \n  PACC   protein accessions \n  PUID   protein uids \n  PMID   PubMed ids of accessions linked to the record \n  TID    taxonomy id \n  GO     Gene Ontology \n  DOM    Domain Name \n  DDAT   The date on which the record was discontinued \n  CPOS   Chromosome base position \n  GFN    Gene full name \n  PFN    Protein full name \n  GL     Gene length \n  XC     Exon count \n  GRP    Relationships for this gene \n  PREF   Preferred symbol of the gene \n  AACC   Assembly accession \n  ASM    Assembly name \n  EXPR   Gene expression \n\n\nThe functions of rentrez are designed to work together. The main ones we will be using in this session are:\n\n\n\n\n\n\n\nFunction\nPurpose\n\n\n\n\nentrez_search()\nSearch a specific NCBI database and retrieve UIDs (unique identifiers).\n\n\nentrez_summary()\nGet summary metadata for UIDs returned by a search.\n\n\nextract_from_esummary()\nExtract specific fields (e.g., title, publication date) from esummary results.\n\n\nentrez_fetch()\nDownload full records (e.g., FASTA, GenBank, XML).\n\n\nentrez_link()\nFind related data across NCBI databases.\n\n\n\nYou can check out the rentrez documentation] for more information on these and other functions."
  },
  {
    "objectID": "02-rentrez.html#finding-and-fetching-a-sequence",
    "href": "02-rentrez.html#finding-and-fetching-a-sequence",
    "title": "Accessing NCBI data with rentrez",
    "section": "Finding and fetching a sequence",
    "text": "Finding and fetching a sequence\nLet’s start by searching for the record in the Gene database for human gene TP53, an important gene in the study of cancer. The entrez_search() function takes the following arguments:\n\ndb, name of the database to search for (required)\nterm, the search term, you can also use MeSH terms to perform your search (required)\nretmax, the default of retrievable ids is 20, this argument can be used to change that number\nretmode, to select the format of your output (XML or JSON), by default will be XML\nuse_history, to store a history of searches in NCBI’s server\n\nThe term argument can take a simple or more complicated search string linked together with boolean terms AND, OR, and NOT. The name of the field like [gene name] or [orgn] comes after the search term for that field. Note that the [orgn] field can accept scientific or common names or organisms.\n\nsearch_tp53_hs &lt;- entrez_search(db=\"gene\", \n                                term =\"TP53[gene] AND human[orgn]\")\n\n\nLists\nLet’s take a closer look at the results we get from our search. The search_tp53_hs object is a structure called a list. Recall that a vector is a one-dimensional data structure in R where every element must be of the same type. Lists are one-dimensional data structures where elements can be anything, even data frames or other lists. Lists are a common way to store hierarchical data, like XML or JSON data formats. You’ll find that it is very common for data to be stored as a list in bioinformatics workflows.\n\n\n\n\n\n\n\n\n\nHomogeneous\nHeterogeneous\n\n\n\n\n1D\nVectorAll elements of the same type\nListCan contain any type of R object\n\n\n2D\nMatrixAll elements of the same type\nData FrameEach column can differ in type\n\n\n\nTo access items in a list, you can use $ or [[]].\n\nlink_tp53_hs &lt;- entrez_link(dbfrom=\"gene\", \n                            id=search_tp53_hs$ids, \n                            db=\"nuccore\")\n\n\nfetch_tp53_hs &lt;- entrez_fetch(db=\"nuccore\",\n                              id=link_tp53_hs$links$gene_nuccore_refseqgene, \n                              rettype = \"fasta\")\n\n\ncat(fetch_tp53_hs)\n\n\nwriteLines(fetch_tp53_hs, \"data/tp53_human.fasta\")"
  },
  {
    "objectID": "02-rentrez.html#manipulating-sequences",
    "href": "02-rentrez.html#manipulating-sequences",
    "title": "Accessing NCBI data with rentrez",
    "section": "Manipulating sequences",
    "text": "Manipulating sequences\n\nfasta &lt;- readDNAStringSet(\"data/tp53_human.fasta\")\n\n\ndna_tp53_human &lt;- fasta[[1]]\n\n\nalphabetFrequency(dna_tp53_human)\n\n   A    C    G    T    M    R    W    S    Y    K    V    H    D    B    N    - \n8647 7986 8058 8081    0    0    0    0    0    0    0    0    0    0    0    0 \n   +    . \n   0    0 \n\n\n\nalphabetFrequency(dna_tp53_human, baseOnly = TRUE)\n\n    A     C     G     T other \n 8647  7986  8058  8081     0 \n\n\n\ngc_content &lt;- letterFrequency(dna_tp53_human, \n                              letters = c(\"G\", \"C\"), \n                              as.prob=TRUE)\nsum(gc_content)\n\n[1] 0.4895643\n\n\n\ntp53_comp &lt;- complement(dna_tp53_human)\n\n\ntp53_rev &lt;- reverse(dna_tp53_human)\n\n\ntp53_rev_comp &lt;- reverseComplement(dna_tp53_human)"
  },
  {
    "objectID": "01-GettingSetUp.html",
    "href": "01-GettingSetUp.html",
    "title": "Introduction and Set Up",
    "section": "",
    "text": "Note: This lesson assumes some basic familiarity with R, RStudio, and the tidyverse."
  },
  {
    "objectID": "01-GettingSetUp.html#learning-objectives",
    "href": "01-GettingSetUp.html#learning-objectives",
    "title": "Introduction and Set Up",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nUnderstand the difference between CRAN and Bioconductor\nBe able to install Bioinformatics packages"
  },
  {
    "objectID": "01-GettingSetUp.html#getting-set-up",
    "href": "01-GettingSetUp.html#getting-set-up",
    "title": "Introduction and Set Up",
    "section": "Getting Set Up",
    "text": "Getting Set Up\nRStudio provides a useful feature called Projects which act like a container for your work. As you use R more, you will find it useful to make sure your files and environment for one real-world project are kept together and separate from other projects.\nLet’s create a new project now.\n\nGo to File &gt; New Project\nIn Create project from menu choose New Directory\nChoose Project Type New Project\nMake sure Create project as subdirectory of: is pointing to Desktop (or whatever your preferred location is)\nCall your new directory r_bioinformatics_lesson\nSelect the check box that says Open in New Session\nInside your new project, create folders called data and figures"
  },
  {
    "objectID": "01-GettingSetUp.html#what-is-bioconductor",
    "href": "01-GettingSetUp.html#what-is-bioconductor",
    "title": "Introduction and Set Up",
    "section": "What is Bioconductor?",
    "text": "What is Bioconductor?\nIn this lesson, we’ll be working with a number of bioinformatics packages along with the tidyverse family of packages. Many R packages come from CRAN (Comprehensive R Archive Network). Packages from CRAN can be installed either by using the Install Packages widget in RStudio (lower-right pane) or with the function install.packages().\nBioconductor is an open-source project that provides tools for the analysis and comprehension of high-throughput biological data, built on the R programming language. It includes a large ecosystem of packages for tasks such as sequence analysis, genomic data visualization, and statistical modeling in bioinformatics. Bioconductor emphasizes reproducibility, interoperability, and the integration of biological metadata, making it especially well-suited for omics research.\nTo use packages from Bioconductor, we must first install and load the Biocmanager package from CRAN. Biocmanager provides an interface to the Bioconductor repository.\n\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nlibrary(BiocManager)\n\nNext, let’s install the packages we will be using in this session. From CRAN, we’ll be installing\n\n\n\nPackage Name\nPurpose\n\n\n\n\ntidyverse\nWrangling and visualizing data\n\n\nrentrez\nAccessing data from NCBI databases\n\n\nape\nPhylogenetic analysis\n\n\n\n\ninstall.packages(c(\"tidyverse\", \"rentrez\", \"ape\"))\n\nThen we can install our Bioconductor packages with Biocmanager\n\n\n\nPackage Name\nPurpose\n\n\n\n\nBiostrings\nManipulating biological sequences\n\n\npwalign\nPairwise Alignment\n\n\nDECIPHER\nMultiple Sequence Alignment\n\n\n\n\nBiocManager::install(c(\"Biostrings\", \"pwalign\", \"DECIPHER\"))\n\nNOTE: You only need to install a package once on your system (and after updates), but you will want to load the packages into your R session with the library() function.\n\n#|warning: false\n#|message: false\n\nlibrary(ape)\n\nWarning: package 'ape' was built under R version 4.4.3\n\nlibrary(Biostrings)\n\nWarning: package 'Biostrings' was built under R version 4.4.2\n\n\nLoading required package: BiocGenerics\n\n\n\nAttaching package: 'BiocGenerics'\n\n\nThe following objects are masked from 'package:stats':\n\n    IQR, mad, sd, var, xtabs\n\n\nThe following objects are masked from 'package:base':\n\n    anyDuplicated, aperm, append, as.data.frame, basename, cbind,\n    colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find,\n    get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply,\n    match, mget, order, paste, pmax, pmax.int, pmin, pmin.int,\n    Position, rank, rbind, Reduce, rownames, sapply, saveRDS, setdiff,\n    table, tapply, union, unique, unsplit, which.max, which.min\n\n\nLoading required package: S4Vectors\n\n\nLoading required package: stats4\n\n\n\nAttaching package: 'S4Vectors'\n\n\nThe following object is masked from 'package:utils':\n\n    findMatches\n\n\nThe following objects are masked from 'package:base':\n\n    expand.grid, I, unname\n\n\nLoading required package: IRanges\n\n\nWarning: package 'IRanges' was built under R version 4.4.2\n\n\n\nAttaching package: 'IRanges'\n\n\nThe following object is masked from 'package:grDevices':\n\n    windows\n\n\nLoading required package: XVector\n\n\nLoading required package: GenomeInfoDb\n\n\nWarning: package 'GenomeInfoDb' was built under R version 4.4.2\n\n\n\nAttaching package: 'Biostrings'\n\n\nThe following object is masked from 'package:ape':\n\n    complement\n\n\nThe following object is masked from 'package:base':\n\n    strsplit\n\nlibrary(DECIPHER)\nlibrary(pwalign)\n\n\nAttaching package: 'pwalign'\n\n\nThe following objects are masked from 'package:Biostrings':\n\n    aligned, alignedPattern, alignedSubject, compareStrings, deletion,\n    errorSubstitutionMatrices, indel, insertion, mismatchSummary,\n    mismatchTable, nedit, nindel, nucleotideSubstitutionMatrix,\n    pairwiseAlignment, PairwiseAlignments,\n    PairwiseAlignmentsSingleSubject, pid, qualitySubstitutionMatrices,\n    stringDist, unaligned, writePairwiseAlignments\n\nlibrary(rentrez)\n\nWarning: package 'rentrez' was built under R version 4.4.3\n\nlibrary(tidyverse)\n\nWarning: package 'ggplot2' was built under R version 4.4.3\n\n\nWarning: package 'tibble' was built under R version 4.4.3\n\n\nWarning: package 'purrr' was built under R version 4.4.3\n\n\nWarning: package 'lubridate' was built under R version 4.4.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ lubridate::%within%() masks IRanges::%within%()\n✖ dplyr::collapse()     masks Biostrings::collapse(), IRanges::collapse()\n✖ dplyr::combine()      masks BiocGenerics::combine()\n✖ purrr::compact()      masks XVector::compact()\n✖ dplyr::desc()         masks IRanges::desc()\n✖ tidyr::expand()       masks S4Vectors::expand()\n✖ dplyr::filter()       masks stats::filter()\n✖ dplyr::first()        masks S4Vectors::first()\n✖ dplyr::lag()          masks stats::lag()\n✖ ggplot2::Position()   masks BiocGenerics::Position(), base::Position()\n✖ purrr::reduce()       masks IRanges::reduce()\n✖ dplyr::rename()       masks S4Vectors::rename()\n✖ lubridate::second()   masks S4Vectors::second()\n✖ lubridate::second&lt;-() masks S4Vectors::second&lt;-()\n✖ dplyr::slice()        masks XVector::slice(), IRanges::slice()\n✖ dplyr::where()        masks ape::where()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nDon’t be afraid if you see a lot of text and messages printing out in the console as you go through this process. You may be asked to update other packages that the ones we are trying to install are dependent on. You will also be warned if some of the packages have functions with the same name."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]